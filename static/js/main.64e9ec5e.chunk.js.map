{"version":3,"sources":["components/Header.js","components/Noteform.js","components/Notes.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","Noteform","state","title","note","createNote","bind","evt","key","this","setState","target","value","firebase","ref","push","htmlFor","type","name","onChange","onChangeHAndler","id","onClick","Component","Notes","child","remove","notes","map","removeNote","App","db","listenForChange","on","snapshot","val","filter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.64e9ec5e.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\n\r\nconst Header = props =>(\r\n    <header className=\"header\">\r\n        <h3 className=\"title\">Notes<span>  </span> </h3>\r\n    </header>\r\n\r\n)\r\n\r\n\r\nexport default Header;\r\n\r\n","import React, { Component } from 'react';\r\nimport * as firebase from 'firebase';\r\nexport class Noteform extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            title: '',\r\n            note: ''       \r\n         }\r\n         this.createNote = this.createNote.bind(this);\r\n\r\n    }\r\n\r\n    onChangeHAndler (evt, key) {\r\n        this.setState({\r\n            [key]: evt.target.value\r\n        });\r\n    }\r\n\r\n    createNote () {\r\n        if(this.state.title !=='' && this.state.note !==''){\r\n            firebase.database().ref('notes').push({\r\n                title: this.state.title,\r\n                note: this.state.note\r\n            })\r\n        }\r\n\r\n    }\r\n    \r\n    render() {\r\n     return(\r\n        <section className=\"noteform\">\r\n            <h3>Create New Note</h3>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"noteform-title\">Title</label>\r\n            <input type=\"text\" className=\"noteform-title\"  name=\"noteform-title\" value={this.state.title} onChange={(evt) =>\r\n            this.onChangeHAndler(evt, 'title')}  />\r\n\r\n        \r\n            </div>\r\n\r\n\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"noteform-note\">Note</label>\r\n                <textarea  name=\"noteform-note\" id=\"noteform--note\" value={this.state.note} onChange={(evt) =>\r\n            this.onChangeHAndler(evt, 'note')}></textarea>\r\n            </div>\r\n\r\n\r\n            <button onClick={this.createNote}>Create Note</button>\r\n\r\n\r\n\r\n            </section>\r\n        \r\n        )\r\n    }\r\n}\r\n\r\nexport default Noteform;\r\n ","import React, { Component } from 'react';\r\nimport * as firebase from 'firebase';\r\n\r\nexport class Notes extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n    }\r\n    removeNote (id){\r\n        firebase.database().ref('notes').child(id).remove();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"notes-wrapper\">\r\n                <h3>Notes</h3>\r\n                <div className=\"notes\">\r\n                    {this.props.notes.map(note => (\r\n                        <div className=\"note\" key={note.id}>\r\n                            <div className=\"note-title\">\r\n                                <h3>{note.title}</h3>\r\n                                <div className=\"remove\" onClick={()=> this.removeNote(note.id)}>x</div>\r\n                            </div>\r\n                            <div className=\"note-content\">\r\n                                <p>{note.note}</p>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n          \r\n          \r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Notes;\r\n","import React, {Component} from 'react';\nimport * as firebase from 'firebase';\nimport Header from './components/Header';\nimport Noteform from './components/Noteform';\nimport Notes from './components/Notes';\nclass App extends Component {\n  constructor () {\n    super();\n    this.state = {\n      notes : []\n    }\n  }\n\n  componentDidMount () {\n    this.db = firebase.database();\n    this.listenForChange();\n  }\n\n  listenForChange () {\n    this.db.ref('notes').on(\"child_added\", snapshot => {\n      let note = {\n        id: snapshot.key,\n        title : snapshot.val().title,\n        note : snapshot.val().note\n      }\n      let notes = this.state.notes;\n      notes.push(note);\n\n      this.setState({\n        notes : notes\n      });\n    });\n    \n    this.db.ref('notes').on(\"child_removed\", snapshot => {\n      let notes = this.state.notes;\n      notes = notes.filter(note =>  note.id !== snapshot.key);\n\n      this.setState({\n        notes : notes\n      });\n    });\n  }\nrender(){\n  return (\n    <div className=\"App\">\n      <Header />\n      <main>\n        <Noteform />\n        <Notes notes={this.state.notes} />\n      </main>\n      \n    </div>\n  );\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase';\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC6uSZFmo5zeQaGomfjI0zQ5lWY3z8WBD8\",\n    authDomain: \"notes-56173.firebaseapp.com\",\n    databaseURL: \"https://notes-56173.firebaseio.com\",\n    projectId: \"notes-56173\",\n    storageBucket: \"notes-56173.appspot.com\",\n    messagingSenderId: \"335815437449\",\n    appId: \"1:335815437449:web:7bb0ac868c9197dd7daa58\",\n    measurementId: \"G-1R7GGSY6EY\"\n  };\n  \n  firebase.initializeApp(firebaseConfig);\n  firebase.analytics();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}